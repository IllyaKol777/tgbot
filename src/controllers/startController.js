const { User, StartPost, NextPost, AviatorPost, MinesPost, AdminPost } = require('../models');
const path = require('path');

class StartController {
    async handleStartCommand(ctx) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ
        const telegramId = ctx.from.id.toString();
        const username = ctx.from.username || 'NoUsername';
        let user = await User.findOne({ where: { telegramId } });

        if (!user) {
            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
            user = await User.create({ telegramId, username });
        }

        // –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "Next ‚úÖ"
        const startPost = await StartPost.findOne();
        if (startPost) {
            await ctx.reply(startPost.text, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next ‚úÖ', callback_data: 'next_step' }]
                    ]
                }
            });
        }
    }

    async handleNextStep(ctx) {
        // –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–µ–æ –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
        const nextPost = await NextPost.findOne();
        if (nextPost) {
            const videoPath = path.resolve(__dirname, '../../videos', `${nextPost.video_name}.mp4`);
            await ctx.replyWithVideo({ source: videoPath }, {
                caption: nextPost.text,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üöÄAVIATOR', callback_data: 'aviator_step' }],
                        [{ text: 'Ÿáüí£MINESüí£', callback_data: 'mines_step' }]
                    ]
                }
            });
        }
    }

    async handleAviatorStep(ctx) {
        const aviatorPost = await AviatorPost.findOne();
        if (aviatorPost) {
            const videoPath = path.resolve(__dirname, '../../videos', `${aviatorPost.video_name}.mp4`);
            await ctx.replyWithVideo({ source: videoPath }, {
                caption: aviatorPost.text
            });
        }

        const adminPost = await AdminPost.findOne();
        if (adminPost) {
            await ctx.reply(`${adminPost.text}\n${adminPost.link}`);
        }

        await this.showMainMenu(ctx);
    }

    async handleMinesStep(ctx) {
        const minesPost = await MinesPost.findOne();
        if (minesPost) {
            const videoPath = path.resolve(__dirname, '../../videos', `${minesPost.video_name}.mp4`);
            await ctx.replyWithVideo({ source: videoPath }, {
                caption: minesPost.text
            });
        }

        const adminPost = await AdminPost.findOne();
        if (adminPost) {
            await ctx.reply(`${adminPost.text}\n${adminPost.link}`);
        }

        await this.showMainMenu(ctx);
    }

    async showMainMenu(ctx) {
        const user = await User.findOne({ where: { telegramId: ctx.from.id.toString() } });

        const buttons = [
            [{ text: 'üöÄAVIATOR' }, { text: 'Ÿáüí£MINESüí£' }, { text: 'üëá Subscribe to the channel' }]
        ];

        if (user.isAdmin) {
            buttons.push([{ text: '–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' }]);
        }

        await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', {
            reply_markup: {
                keyboard: buttons,
                resize_keyboard: true
            }
        });
    }

    async handleAdminPanel(ctx) {
        await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
            reply_markup: {
                keyboard: [
                    [{ text: '–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å' }],
                    [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: '–†–µ–∫–ª–∞–º–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è' }],
                    [{ text: '–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤' }, { text: '–°–ø–∏—Å–æ–∫ –≤—ñ–¥–ª–µ–∂–∞–Ω–Ω—è' }],
                    [{ text: '–î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞' }, { text: '–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤' }],
                    [{ text: '–ù–∞–∑–∞–¥' }]
                ],
                resize_keyboard: true
            }
        });
    }

    async handleBackToMainMenu(ctx) {
        await this.showMainMenu(ctx);
    }
}

module.exports = new StartController();
